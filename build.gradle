plugins {
    id 'java'
    id 'application'
    id 'eclipse'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.diffplug.spotless' version '5.8.2'
    // Mandatory plugin, to publish on Nexus with dependencies.
    // The plugin needs the configuration block "publishing" (see publishing.gradle)
    // and the tasks extended from GenerateMavenPom.
    id 'maven-publish'
    id 'net.ltgt.errorprone' version '1.3.0'
    id 'com.github.spotbugs' version '4.6.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'jacoco'
    id 'com.github.ksoichiro.console.reporter' version '0.6.2'
    id 'se.bjurr.violations.violations-gradle-plugin' version '1.48'
    id 'pmd'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.sonarqube' version '3.0'
    id 'team.yi.semantic-gitlog' version '0.5.13'
}

group = 'io.neonbee'
// have to use single quotes for XMake, change as soon as new version Gradle build plugin is merged
version = '0.0.8'
mainClassName = 'io.neonbee.Launcher'
archivesBaseName = 'neonbee-core'
sourceCompatibility = 11

project.ext {
    isReleaseVersion = !version.endsWith('-SNAPSHOT')
    distributionDir = file("${buildDir}/dist")
    distributionLibsDir = file("${distributionDir}/libs")
    generatedTrustStorePassword = UUID.randomUUID().toString()
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Framework dependencies
    def vertx_version = '4.0.0'
    implementation group: 'io.vertx', name: 'vertx-core', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-web-client', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-web', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-config-yaml', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-config', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-micrometer-metrics', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-auth-common', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-auth-jwt', version: vertx_version
    implementation group: 'io.vertx', name: 'vertx-hazelcast', version: vertx_version

    def jackson_version = '2.11.3'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jackson_version
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jackson_version
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version

    def olingo_version = '4.8.0'
    implementation(group: 'org.apache.olingo', name: 'odata-server-core', version: olingo_version) {
        exclude group: 'io.netty'
    }
    implementation group: 'org.apache.olingo', name: 'odata-server-core-ext', version: olingo_version

    implementation group: 'com.sap.cds', name: 'cds-services-impl', version: '1.9.0'
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.3.1'
    implementation group: 'org.ow2.asm', name: 'asm', version: '7.2'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.29'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.google.guava', name: 'guava', version: '30.1-jre'
    implementation group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'

    // Framework test dependencies
    testImplementation group: 'io.vertx', name: 'vertx-junit5', version: vertx_version

    def truth_version = '1.1'
    testImplementation group: 'com.google.truth', name: 'truth', version: truth_version
    testImplementation group: 'com.google.truth.extensions', name: 'truth-java8-extension', version: truth_version

    def mockito_version = '3.7.7'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockito_version
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockito_version

    def jupiter_version = '5.7.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiter_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiter_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: jupiter_version

    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'

    // Required for Eclipse to run Unit tests.
    testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.7.0'

    // Gradle plugin dependencies
    errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.3.3'
    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.38'
}

apply from: 'gradle/distribution.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/codeCoverage.gradle'
apply from: 'gradle/release.gradle'
apply from: 'gradle/staticCodeCheck.gradle'
apply from: 'gradle/changelog.gradle'

task initWrapper(type: Wrapper) {
    gradleVersion = '6.7.1'
}

// ############ Test Phase
test {
    if (!org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isMacOsX()) {
        systemProperties = [
            'junit.jupiter.execution.parallel.enabled' : 'true',
            'junit.jupiter.execution.parallel.mode.default' : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default' : 'concurrent'
        ]
    }

    // Later, if the violations plugin supports JUNIT5 we have to ignore the issues
    // during SpotBugs run, because the violations plugin will display the issues
    // and let the build fail later. But currently we have to fail directly.
    ignoreFailures = false
    dependsOn('spotlessCheck', 'cleanTest')
    useJUnitPlatform()
    testLogging {
        events = ['passed', 'skipped', 'failed', 'standardOut', 'standardError']
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL // Full display of exceptions
        // Don't show complete standard out and standard error of the tests on the console.
        // Show only verbose output for failing tests.
        showStandardStreams = false
    }
    reports {
        junitXml {
            enabled = true
            destination = file("${buildDir}/reports/junit/xml")
        }
        html {
            enabled = true
            destination = file("${buildDir}/reports/junit/html")
        }
    }
    finalizedBy jacocoTestReport
}

// ############ Docker Build
docker {
    dependsOn distTar

    def dockerName = archivesBaseName+':'
    name dockerName+'latest'
    tag 'version', dockerName+version
    tag 'majorVersion', dockerName+version.split('\\.')[0]
    tag 'minorVersion', dockerName+version.substring(0, version.lastIndexOf('.'))
    files tasks.distTar.outputs
    buildArgs([NEONBEE_VERSION: version])
    pull true
}

// ############ SonarQube Plugin
sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}

// ############ Violations Plugin
task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
    maxReporterColumnWidth = 10 // 0 means "no limit"
    maxRuleColumnWidth = 50
    maxSeverityColumnWidth = 10
    maxLineColumnWidth = 10
    maxMessageColumnWidth = 200
    minSeverity = 'WARN' // INFO, WARN or ERROR
    detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
    maxViolations = 0 // Fail the build if total number of found violations is higher
    printViolations = true

    // Formats are listed here: https://github.com/tomasbjerre/violations-lib
    violations = [
        ['FINDBUGS', '.', ".*/build/reports/spotbugs/.*\\.xml\$",'Spotbugs'],
        ['JUNIT', '.', ".*/build/reports/junit/xml/.*\\.xml\$",'JUnit'],
        ['PMD', '.', ".*/build/reports/pmd/.*\\.xml\$", 'PMD'],
        ['CHECKSTYLE', '.', ".*/build/reports/checkstyle/.*\\.xml\$", 'Checkstyle']
    ]
}
check.finalizedBy violations
test.finalizedBy violations
build.finalizedBy violations

// ############ JavaDoc Build
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

import org.gradle.internal.logging.events.OutputEvent
import org.gradle.internal.logging.events.OutputEventListener
import org.gradle.internal.logging.LoggingOutputInternal
tasks.withType(Javadoc) {
    def exceptions = []
    doFirst {
        gradle.services.get(LoggingOutputInternal).addOutputEventListener(new OutputEventListener() {
            void onOutput(OutputEvent event) {
                if (event.toString() =~ " warning: ") {
                    exceptions << "Javadoc warning: ${event.toString()}"
                }
            }
        })
    }
    doLast {
         if (exceptions.size() > 0) {
            throw new GradleException(String.join('\n', exceptions))
        }
    }
}

// ############ Release
task release(type: Exec) {
    workingDir projectDir
    if (project.hasProperty('nextVersion')) {
        nextVersion = project.getProperty('nextVersion')
        println 'Releasing next version ' + nextVersion
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            commandLine 'cmd', '/c', 'gradle/release.sh' nextVersion
        } else {
            commandLine 'sh', '-c', "./gradle/release.sh ${nextVersion}"
        }
    }
}