package io.neonbee.internal.deploy;

import io.neonbee.NeonBee;
import io.vertx.core.Future;

public abstract class Deployment {
    protected final NeonBee neonBee;

    private final Deployable deployable;

    Deployment(NeonBee neonBee, Deployable deployable) {
        this.neonBee = neonBee;
        this.deployable = deployable;
    }

    /**
     * Get the {@link Deployable} that led to this {@link Deployment}.
     *
     * @return the associated {@link Deployable}
     */
    public final Deployable getDeployable() {
        return deployable;
    }

    /**
     * Get a unique ID for this {@link Deployment}.
     *
     * @return a unique id assigned to this {@link Deployment}, e.g. generated by Vert.x during verticle deployment. the
     *         default implementation will return the identifier of the deployment as well as a unique ID hash code of
     *         this deployment
     */
    public String getDeploymentId() {
        return deployable.getIdentifier() + "@" + Integer.toHexString(hashCode());
    }

    /**
     * Undeploys the related {@link Deployment}.
     *
     * Note: In its default implementation this method will undeploy a single verticle.
     *
     * @return a {@link Future} signaling the completion of the undeployment process
     */
    public abstract Future<Void> undeploy();
}
