apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        // NeonBee Core Jar
        core(MavenPublication) {
            artifactId = project.archivesBaseName
            artifact source: coreJar
            artifact source: shadowJar
            artifact source: sourcesJar
            artifact source: javadocJar

            pom {
                name = 'NeonBee Core'
                description = 'NeonBee is an open source reactive dataflow engine, a data stream processing framework using Vert.x.'
                url = 'https://neonbee.io/'

                licenses {
                    license {
                        name = 'Eclipse Public License version 2.0'
                        url = 'https://opensource.org/licenses/EPL-2.0'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/SAP/neonbee.git'
                    developerConnection = 'scm:git:git@github.com:SAP/neonbee.git'
                    url = 'https://github.com/sap/neonbee'
                }

                developers {
                    developer {
                        id = 'pascal'
                        name = 'Pascal'
                        email = 'pascal@neonbee.io'
                    }
                    developer {
                        id = 'kristian'
                        name = 'Kristian'
                        email = 'kristian@neonbee.io'
                    }
                    developer {
                        id = 'sebastian'
                        name = 'Sebastian'
                        email = 'sebastian@neonbee.io'
                    }
                    developer {
                        id = 'danilo'
                        name = 'Danilo'
                        email = 'danilo@neonbee.io'
                    }
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Log the start of dependency processing
                def dependencyExclusions = [:]

                // Create a map of dependencies and their exclusion rules
                configurations.implementation.allDependencies
                        .findAll { dep -> !dep.excludeRules?.isEmpty() }
                        .forEach { dep ->
                            def rules = dep.excludeRules.collect { rule ->
                                [groupId: rule.group, artifactId: rule.module]
                            }
                            // Use group:name as the key
                            dependencyExclusions.put(String.valueOf("${dep.group}:${dep.name}"), rules)
                        }

                // Iterate over implementation dependencies
                configurations.implementation.allDependencies.each { dependency ->
                    def dependencyKey = "${dependency.group}:${dependency.name}"
                    logger.lifecycle("Dependency key class map: ${dependencyKey.getClass()}")

                    def exclusions = dependencyExclusions[dependencyKey]
                    logger.lifecycle("Looking for exclusion: ${dependencyKey}")

                    // Add the dependency to the POM
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group ?: 'unknown-group')
                    dependencyNode.appendNode('artifactId', dependency.name ?: 'unknown-artifact')
                    dependencyNode.appendNode('version', dependency.version ?: 'unspecified-version')

                    if (exclusions) {
                        // Add exclusions to the current dependency if applicable
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        exclusions.each { exclusion ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', exclusion.groupId)
                            exclusionNode.appendNode('artifactId', exclusion.artifactId)
                        }

                        // Log the added exclusions
                        logger.lifecycle("Added exclusions for dependency: group='${dependency.group}', name='${dependency.name}', exclusions=${exclusions}")
                    } else {
                        logger.lifecycle("No exclusions for dependency: group='${dependency.group}', name='${dependency.name}'")
                    }
                }
            }
        }

        // NeonBee Dist Tar Gz Archive
        dist(MavenPublication) {
            artifactId = 'neonbee-dist'
            artifact source: distTar

            pom {
                name = 'NeonBee Core Distribution'
                description = 'NeonBee is an open source reactive dataflow engine, a data stream processing framework using Vert.x.'
                url = 'https://neonbee.io/'

                licenses {
                    license {
                        name = 'Eclipse Public License version 2.0'
                        url = 'https://opensource.org/licenses/EPL-2.0'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/SAP/neonbee.git'
                    developerConnection = 'scm:git:git@github.com:SAP/neonbee.git'
                    url = 'https://github.com/sap/neonbee'
                }

                developers {
                    developer {
                        id = 'pascal'
                        name = 'Pascal'
                        email = 'pascal@neonbee.io'
                    }
                    developer {
                        id = 'kristian'
                        name = 'Kristian'
                        email = 'kristian@neonbee.io'
                    }
                    developer {
                        id = 'sebastian'
                        name = 'Sebastian'
                        email = 'sebastian@neonbee.io'
                    }
                    developer {
                        id = 'danilo'
                        name = 'Danilo'
                        email = 'danilo@neonbee.io'
                    }
                }
            }
        }

        // NeonBee Test Jar
        test(MavenPublication) {
            artifactId = "${project.archivesBaseName}-test"
            artifact source: testJar
            artifact source: testSourcesJar
            artifact source: testJavadocJar

            pom {
                name = 'NeonBee Core Test'
                description = 'NeonBee is an open source reactive dataflow engine, a data stream processing framework using Vert.x.'
                url = 'https://neonbee.io/'

                licenses {
                    license {
                        name = 'Eclipse Public License version 2.0'
                        url = 'https://opensource.org/licenses/EPL-2.0'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/SAP/neonbee.git'
                    developerConnection = 'scm:git:git@github.com:SAP/neonbee.git'
                    url = 'https://github.com/sap/neonbee'
                }

                developers {
                    developer {
                        id = 'pascal'
                        name = 'Pascal'
                        email = 'pascal@neonbee.io'
                    }
                    developer {
                        id = 'kristian'
                        name = 'Kristian'
                        email = 'kristian@neonbee.io'
                    }
                    developer {
                        id = 'sebastian'
                        name = 'Sebastian'
                        email = 'sebastian@neonbee.io'
                    }
                    developer {
                        id = 'danilo'
                        name = 'Danilo'
                        email = 'danilo@neonbee.io'
                    }
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the implementation dependencies and add them to the pom.xml
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
                // Iterate over the testImplementation dependencies and add them to the pom.xml
                configurations.testImplementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                // At NeonBee core as dependency
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', project.group)
                dependencyNode.appendNode('artifactId', project.archivesBaseName)
                dependencyNode.appendNode('version', project.version)
            }
        }
    }

    repositories {
        maven {
            name = 'mavenCentral'
            credentials(org.gradle.api.artifacts.repositories.PasswordCredentials)
            def releasesRepoUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.core
        sign publishing.publications.dist
        sign publishing.publications.test
    }
}

task setNewVersion {
    if (project.hasProperty('newVersion')) {
        println "Set Project version from $version to $newVersion"
        buildFile.setText(buildFile.getText().replaceFirst("version = '$version'", "version = '$newVersion'"))
    }
}
